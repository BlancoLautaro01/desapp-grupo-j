package ar.edu.unq.desapp.grupoj.desapp.model;

import ar.edu.unq.desapp.grupoj.desapp.factories.UserFactory;

import ar.edu.unq.desapp.grupoj.desapp.model.entities.User;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class UserTest {
    private Validator validator;
    @BeforeAll
    public void setUp() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    public void userConstructorIsAutoGenerated() {
        Integer userId = 1;
        String name = "UserName";
        String surname = "AValidSurname";
        String password = "aValidPAss!";
        String email = "validemail@hotmail.com";
        String address = "AValidAddress";
        String cvu = "1234567891234567891234";
        String cryptoWallet = "12345678";

        User user = new User(userId, name, surname, password, email, address, cvu, cryptoWallet);

        assertEquals(user.getUserId(), userId);
        assertEquals(user.getName(), name);
        assertEquals(user.getSurname(), surname);
        assertEquals(user.getPassword(), password);
        assertEquals(user.getEmail(), email);
        assertEquals(user.getAddress(), address);
        assertEquals(user.getCvu(), cvu);
        assertEquals(user.getCryptoWallet(), cryptoWallet);
    }

    @Test
    public void anUserHaveAnId() {
        Integer id = 1;
        User user = UserFactory.anyUserWithId(id);

        assertEquals(user.getUserId(), id);
    }
    @Test
    public void anUserCantHaveANameWithLessThan3Characters() {
        String invalidName = "I";
        User user = UserFactory.anyUserWithName(invalidName);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }
    @Test
    public void anUserCantHaveANameWithMoreThan30Characters() {
        String invalidName = "ThisNameHaveMoreThanThirtyCharacters";
        User user = UserFactory.anyUserWithName(invalidName);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void whenCreateAUserWithAValidName() {
        String validName = "ValidName";
        User user = UserFactory.anyUserWithName(validName);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertTrue(violations.isEmpty());
        assertEquals(user.getName(), validName);
    }

    @Test
    public void anUserCantHaveASurnameWithLessThan3Characters() {
        String invalidSurname = "I";
        User user = UserFactory.anyUserWithSurname(invalidSurname);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }
    @Test
    public void anUserCantHaveASurnameWithMoreThan30Characters() {
        String invalidSurname = "ThisSurnameHaveMoreThanThirtyCharacters";
        User user = UserFactory.anyUserWithSurname(invalidSurname);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void whenCreateAUserWithAValidSurname() {
        String validSurname = "ValidSurname";
        User user = UserFactory.anyUserWithSurname(validSurname);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertTrue(violations.isEmpty());
        assertEquals(user.getSurname(), validSurname);
    }

    @Test
    public void anUserCantHaveAPasswordWithLessThan6Characters() {
        String invalidPassword = "I";
        assertIsInvalidPassword(invalidPassword);
    }

    @Test
    public void anUserCantHaveAPasswordWithoutASpecialCharacter() {
        String invalidPassword = "WithoutASpecialCharacter";
        assertIsInvalidPassword(invalidPassword);
    }

    @Test
    public void anUserCantHaveAPasswordWithoutALowerCase() {
        String invalidPassword = "WITHOUTALOWERCASE!!!";
        assertIsInvalidPassword(invalidPassword);
    }

    @Test
    public void anUserCantHaveAPasswordWithoutACapitalLetter() {
        String invalidPassword = "withoutascapitalletter!!!";
        assertIsInvalidPassword(invalidPassword);
    }

    @Test
    public void whenCreateAUserWithAValidPassword() {
        String validPassword = "ValidPassword!";
        User user = UserFactory.anyUserWithPassword(validPassword);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertEquals(user.getPassword(), validPassword);
        assertTrue(violations.isEmpty());
    }

    @Test
    public void anUserCantHaveAEmailWithoutEmailFormat() {
        String invalidEmail = "invalidemail!!!";
        User user = UserFactory.anyUserWithEmail(invalidEmail);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void whenCreateAUserWithValidEmailFormat() {
        String validEmail = "validemail@hotmail.com";
        User user = UserFactory.anyUserWithEmail(validEmail);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertEquals(user.getEmail(), validEmail);
        assertTrue(violations.isEmpty());
    }

    @Test
    public void anUserCantHaveAAddressWithLessThan10Characters() {
        String invalidAddress = "NineChars";
        User user = UserFactory.anyUserWithAddress(invalidAddress);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }
    @Test
    public void anUserCantHaveAnAddressWithMoreThan30Characters() {
        String invalidName = "ThisNameHaveMoreThanThirtyCharacters";
        User user = UserFactory.anyUserWithAddress(invalidName);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void whenCreateAUserWithAValidAddress() {
        String validAddress = "ValidAddress";
        User user = UserFactory.anyUserWithAddress(validAddress);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertTrue(violations.isEmpty());
        assertEquals(user.getAddress(), validAddress);
    }

    @Test
    public void anUserCantHaveACVUWithLessThan22Digits() {
        String invalidCVU = "123213";
        User user = UserFactory.anyUserWithCVU(invalidCVU);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void anUserCantHaveACVUWithMoreThan22Digits() {
        String invalidCVU = "12345678912345678912345";
        User user = UserFactory.anyUserWithCVU(invalidCVU);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void whenCreateAUserWithAValidCVU() {
        String validCVU = "1234567891234567891234";
        User user = UserFactory.anyUserWithCVU(validCVU);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertTrue(violations.isEmpty());
        assertEquals(user.getCvu(), validCVU);
    }

    @Test
    public void anUserCantHaveACryptoWalletWithLessThan8Digits() {
        String invalidCryptoWallet = "1234567";
        User user = UserFactory.anyUserWithCryptoWallet(invalidCryptoWallet);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void anUserCantHaveACryptoWalletWithMoreThan9Digits() {
        String invalidCryptoWallet = "123456789";
        User user = UserFactory.anyUserWithCryptoWallet(invalidCryptoWallet);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }

    @Test
    public void whenCreateAUserWithAValidCryptoWallet() {
        String validCryptoWallet = "12345678";
        User user = UserFactory.anyUserWithCryptoWallet(validCryptoWallet);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertTrue(violations.isEmpty());
        assertEquals(user.getCryptoWallet(), validCryptoWallet);
    }


    private void assertIsInvalidPassword( String invalidPassword) {
        User user = UserFactory.anyUserWithPassword(invalidPassword);
        Set<ConstraintViolation<User>> violations = validator.validate(user);

        assertFalse(violations.isEmpty());
    }
}
